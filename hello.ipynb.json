{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The following chunk of code defines classes for objects to be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "excerpt.txt:  \n",
    "    is a textual file containing, in first line, the name of the signal \n",
    "    extracted (the central EEG) and then 1 column with the values (amplitudes \n",
    "    in microvolt) of its samples. The number of samples depends on the sampling\n",
    "    rate corresponding to the excerpt (see Database description)\n",
    "Automatic_detection_excerpt.txt:  \n",
    "    is a textual file containing, in first line, the name of the detection and \n",
    "    then 2 columns of numerical values. The first column contains time instants\n",
    "    (in second) corresponding to the beginnings of the automatically detected \n",
    "    micro-events (from the beginning of the excerpt), and the second one \n",
    "    contains their durations (in second). \n",
    "Visual_scoring1_excerpt.txt: \n",
    "    is a textual file containing, in the first line, the name of the detection \n",
    "    and then, 2 columns of numerical values. The first column contains time \n",
    "    instants (in second) corresponding to the beginnings of the micro-events \n",
    "    scored by the expert 1 (from the beginning of the excerpt), and the second \n",
    "    one contains their durations (in second). \n",
    "Visual_scoring2_excerpt.txt:  \n",
    "    is a textual file containing, in first line, the name of the detection and \n",
    "    then 2 columns of numerical values. The first column contains time instants\n",
    "    (in second) corresponding to the beginnings of the micro-events scored by \n",
    "    the expert 2 (from the beginning of the excerpt), and the second one\n",
    "    contains their durations (in second). \n",
    "Hypnogram_excerpt.txt:  \n",
    "    is a textual file containing, in first line, the name \"[hypnogram]\" \n",
    "    followed by one column of integer. These numerical values correspond to the\n",
    "    sleep stage (one value per 5 sec) annotated by the expert according to the\n",
    "    Rechtschaffen and Kales criteria.\n",
    "         5=wake\n",
    "         4=REM stage\n",
    "         3=sleep stage S1\n",
    "         2=sleep stage S2\n",
    "         1=sleep stage S3\n",
    "         0=sleep stage S4\n",
    "         -1=sleep stage movement\n",
    "         -2 or -3 =unknow sleep stage \n",
    "\"\"\"\n",
    "\n",
    "# Pseudo enum\n",
    "class Gender: \n",
    "    woman = 0\n",
    "    man = 1\n",
    "    \n",
    "def ReadListOfColsFromFile(file):\n",
    "    lines = file.read().split('\\n')\n",
    "\n",
    "    # Filter file edges\n",
    "    lines.pop(0) # The name of the electrode\n",
    "    lines.pop() # Remove last line (empty, crashes)\n",
    "\n",
    "    # Initialize an empty list of empty lists.\n",
    "    numcols = len(lines[0].split())\n",
    "    data = [[] for i in range(numcols)]\n",
    "\n",
    "    for line in lines:\n",
    "        words = line.split()\n",
    "        for idx, val in enumerate(words):\n",
    "            data[idx].append(float(val))\n",
    "                \n",
    "    file.close\n",
    "    \n",
    "    # Return a list of lists as a numpy array to allow arithmetics (+ more).\n",
    "    return np.array(data)\n",
    "    \n",
    "class CHypnogram:\n",
    "    def __init__(self, file, fs):\n",
    "        self.fs = fs\n",
    "        self.data = ReadListOfColsFromFile(file)[0]\n",
    "        self.time = np.arange(0, len(self.data)) / self.fs\n",
    "        \n",
    "    def plot(self):\n",
    "        plt.figure()           \n",
    "        plt.plot(self.time, self.data) \n",
    "\n",
    "# EEG file object\n",
    "class CEeg:\n",
    "    def __init__(self, file, fs, age, gender):\n",
    "        self.fs = fs\n",
    "        self.data = ReadListOfColsFromFile(file)[0]\n",
    "        self.time = np.arange(0, len(self.data)) / self.fs\n",
    "        self.age = age\n",
    "        self.gender = gender\n",
    "                \n",
    "    def plot(self):\n",
    "        plt.figure()           \n",
    "        plt.plot(self.time, self.data) \n",
    "        \n",
    "class CExpert:\n",
    "    def __init__(self, file, fs):\n",
    "        self.fs = fs\n",
    "        data = ReadListOfColsFromFile(file)\n",
    "        self.iduration = (data[1] * self.fs).astype(int)\n",
    "        self.iposition = ((data[0] + self.iduration/2.0)*self.fs).astype(int)\n",
    "        \n",
    "    def idx(self, iposition, iduration):\n",
    "        istart = iposition - iduration/2\n",
    "        iend   = iposition + iduration/2\n",
    "        return range(int(istart), int(iend))\n",
    "        \n",
    "    def plot(self, eeg, i):\n",
    "        idx = self.idx(self.iposition[i], self.iduration[i])\n",
    "        plt.figure()           \n",
    "        plt.plot(eeg.time[idx], eeg.data[idx]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now we instantiate objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "a bytes-like object is required, not 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-384e725fd91c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# excerpt1 100Hz 51 Woman extracted from 03:15:00 to 03:45:00 C3-A1 52 115\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0meegfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"https://github.com/jnthngdbt/hellopython/blob/master/data/spindle/excerpt1.txt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0meeg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCEeg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meegfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m51\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwoman\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0meeg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-22-d041e0b213fb>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file, fs, age, gender)\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgender\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mReadListOfColsFromFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-22-d041e0b213fb>\u001b[0m in \u001b[0;36mReadListOfColsFromFile\u001b[0;34m(file)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mReadListOfColsFromFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m     \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m     \u001b[0;31m# Filter file edges\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: a bytes-like object is required, not 'str'"
     ]
    }
   ],
   "source": [
    "import urllib.request as url\n",
    "\n",
    "# excerpt1 100Hz 51 Woman extracted from 03:15:00 to 03:45:00 C3-A1 52 115 \n",
    "eegfile = url.urlopen(\"https://github.com/jnthngdbt/hellopython/blob/master/data/spindle/excerpt1.txt\")\n",
    "eeg = CEeg(eegfile, 100, 51, Gender.woman)\n",
    "eeg.plot()\n",
    "\n",
    "hypnofile = url.urlopen(\"https://github.com/jnthngdbt/hellopython/blob/master/data/spindle/Hypnogram_excerpt1.txt\")\n",
    "hypno = CHypnogram(hypnofile, 1/5)\n",
    "hypno.plot()\n",
    "\n",
    "expertfile = url.urlopen(\"https://github.com/jnthngdbt/hellopython/blob/master/data/spindle/Visual_scoring1_excerpt1.txt\")\n",
    "expert = CExpert(expertfile, eeg.fs)\n",
    "expert.plot(eeg, 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('ggplot') # plt.style.available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import urllib.request"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "e = urllib.request.urlopen(\"https://github.com/jnthngdbt/hellopython/blob/master/data/spindle/excerpt1.txt\")\n",
    "import csv\n",
    "f = csv.reader(e)\n",
    "f."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
